services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./client:/app
      - /app/node_modules
      - ./server/public:/server/public
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
    profiles: ["development"]
    depends_on:
      - server

  server:
    image: node:22.17.0-alpine
    working_dir: /app/server
    command: sh -c "npm ci && npm run dev"
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - SYS_DATABASE_URL=postgresql://braaaaam:password@postgres:5432/sys
      - ORG_DATABASE_URL=postgresql://braaaaam:password@postgres:5432/org
      - MIGRATE_ON_START=${MIGRATE_ON_START:-false} # <-- set to false to skip applying migrations on start
      - ENABLE_PGADMIN=true
    volumes:
      - ./server:/app/server
      - /app/server/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    profiles: ["development"]

  # Production/staging: single built image that already includes client build
  prod-server:
    build:
      context: .
      dockerfile: server/Dockerfile
      target: runner
      # Optional --build-arg is GENERATE_MIGRATIONS (true/false)
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - SYS_DATABASE_URL=postgresql://braaaaam:password@postgres:5432/sys
      - ORG_DATABASE_URL=postgresql://braaaaam:password@postgres:5432/org
      - MIGRATE_ON_START=${MIGRATE_ON_START:-false} # <-- set to false to skip applying migrations on start
      - ENABLE_PGADMIN=${ENABLE_PGADMIN:-true}
    depends_on:
      postgres:
        condition: service_healthy
    profiles: ["staging", "production"]

  postgres:
    image: postgres:15
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sys
      - POSTGRES_USER=braaaaam
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    profiles: ["development", "staging", "production"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U braaaaam -d sys"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: braaaaam@rit.edu
      PGADMIN_DEFAULT_PASSWORD: braaaaam
      SCRIPT_NAME: /s/pgadmin
      PGADMIN_CONFIG_PROXY_X_PREFIX_COUNT: 1
      PGADMIN_CONFIG_PROXY_X_HOST_COUNT: 1
    ports:
      - "80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    profiles: ["development", "staging"]
    depends_on:
      postgres:
        condition: service_healthy

  caddy:
    image: caddy:2
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
      - caddy_static:/app/staticfiles
    depends_on:
      - prod-server
    profiles: ["production"]

volumes:
  postgres_data:
  pgadmin_data:
  caddy_data:
  caddy_config:
  caddy_static:
