/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as ScheduleRouteImport } from './routes/schedule'
import { Route as ClientsRouteImport } from './routes/clients'
import { Route as CalendarRouteImport } from './routes/calendar'
import { Route as AdminSettingsRouteImport } from './routes/admin-settings'
import { Route as LoginRouteRouteImport } from './routes/_login/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoginSignInRouteImport } from './routes/_login/sign-in'
import { Route as LoginResetPasswordRouteImport } from './routes/_login/reset-password'
import { Route as LoginForgetPasswordRouteImport } from './routes/_login/forget-password'
import { Route as AuthDashboardRouteImport } from './routes/_auth/dashboard'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const ScheduleRoute = ScheduleRouteImport.update({
  id: '/schedule',
  path: '/schedule',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientsRoute = ClientsRouteImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarRoute = CalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminSettingsRoute = AdminSettingsRouteImport.update({
  id: '/admin-settings',
  path: '/admin-settings',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRouteRoute = LoginRouteRouteImport.update({
  id: '/_login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginSignInRoute = LoginSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => LoginRouteRoute,
} as any)
const LoginResetPasswordRoute = LoginResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => LoginRouteRoute,
} as any)
const LoginForgetPasswordRoute = LoginForgetPasswordRouteImport.update({
  id: '/forget-password',
  path: '/forget-password',
  getParentRoute: () => LoginRouteRoute,
} as any)
const AuthDashboardRoute = AuthDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin-settings': typeof AdminSettingsRoute
  '/calendar': typeof CalendarRoute
  '/clients': typeof ClientsRoute
  '/schedule': typeof ScheduleRoute
  '/users': typeof UsersRoute
  '/dashboard': typeof AuthDashboardRoute
  '/forget-password': typeof LoginForgetPasswordRoute
  '/reset-password': typeof LoginResetPasswordRoute
  '/sign-in': typeof LoginSignInRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin-settings': typeof AdminSettingsRoute
  '/calendar': typeof CalendarRoute
  '/clients': typeof ClientsRoute
  '/schedule': typeof ScheduleRoute
  '/users': typeof UsersRoute
  '/dashboard': typeof AuthDashboardRoute
  '/forget-password': typeof LoginForgetPasswordRoute
  '/reset-password': typeof LoginResetPasswordRoute
  '/sign-in': typeof LoginSignInRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_login': typeof LoginRouteRouteWithChildren
  '/admin-settings': typeof AdminSettingsRoute
  '/calendar': typeof CalendarRoute
  '/clients': typeof ClientsRoute
  '/schedule': typeof ScheduleRoute
  '/users': typeof UsersRoute
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_login/forget-password': typeof LoginForgetPasswordRoute
  '/_login/reset-password': typeof LoginResetPasswordRoute
  '/_login/sign-in': typeof LoginSignInRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin-settings'
    | '/calendar'
    | '/clients'
    | '/schedule'
    | '/users'
    | '/dashboard'
    | '/forget-password'
    | '/reset-password'
    | '/sign-in'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin-settings'
    | '/calendar'
    | '/clients'
    | '/schedule'
    | '/users'
    | '/dashboard'
    | '/forget-password'
    | '/reset-password'
    | '/sign-in'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_login'
    | '/admin-settings'
    | '/calendar'
    | '/clients'
    | '/schedule'
    | '/users'
    | '/_auth/dashboard'
    | '/_login/forget-password'
    | '/_login/reset-password'
    | '/_login/sign-in'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  LoginRouteRoute: typeof LoginRouteRouteWithChildren
  AdminSettingsRoute: typeof AdminSettingsRoute
  CalendarRoute: typeof CalendarRoute
  ClientsRoute: typeof ClientsRoute
  ScheduleRoute: typeof ScheduleRoute
  UsersRoute: typeof UsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/schedule': {
      id: '/schedule'
      path: '/schedule'
      fullPath: '/schedule'
      preLoaderRoute: typeof ScheduleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clients': {
      id: '/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ClientsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin-settings': {
      id: '/admin-settings'
      path: '/admin-settings'
      fullPath: '/admin-settings'
      preLoaderRoute: typeof AdminSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_login': {
      id: '/_login'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_login/sign-in': {
      id: '/_login/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof LoginSignInRouteImport
      parentRoute: typeof LoginRouteRoute
    }
    '/_login/reset-password': {
      id: '/_login/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof LoginResetPasswordRouteImport
      parentRoute: typeof LoginRouteRoute
    }
    '/_login/forget-password': {
      id: '/_login/forget-password'
      path: '/forget-password'
      fullPath: '/forget-password'
      preLoaderRoute: typeof LoginForgetPasswordRouteImport
      parentRoute: typeof LoginRouteRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthDashboardRoute: typeof AuthDashboardRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthDashboardRoute: AuthDashboardRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface LoginRouteRouteChildren {
  LoginForgetPasswordRoute: typeof LoginForgetPasswordRoute
  LoginResetPasswordRoute: typeof LoginResetPasswordRoute
  LoginSignInRoute: typeof LoginSignInRoute
}

const LoginRouteRouteChildren: LoginRouteRouteChildren = {
  LoginForgetPasswordRoute: LoginForgetPasswordRoute,
  LoginResetPasswordRoute: LoginResetPasswordRoute,
  LoginSignInRoute: LoginSignInRoute,
}

const LoginRouteRouteWithChildren = LoginRouteRoute._addFileChildren(
  LoginRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  LoginRouteRoute: LoginRouteRouteWithChildren,
  AdminSettingsRoute: AdminSettingsRoute,
  CalendarRoute: CalendarRoute,
  ClientsRoute: ClientsRoute,
  ScheduleRoute: ScheduleRoute,
  UsersRoute: UsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
